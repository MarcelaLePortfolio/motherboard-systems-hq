/* eslint-disable import/no-commonjs */
import express from "express";
import path from "path";
import { fileURLToPath } from "url";
import { exec } from "child_process";
import fs from "fs";
import fetch from "node-fetch";  // for calling local Ollama API

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());
app.use(express.static(path.join(__dirname, "ui/dashboard")));
app.use(express.static(path.join(__dirname, "public")));

// --- 1️⃣ Agent Status via PM2 ---
app.get("/api/agent-status", (req, res) => {
  exec("pm2 jlist", (err, stdout) => {
    if (err) {
      return res.json({
        Matilda: { status: "offline" },
        Cade: { status: "offline" },
        Effie: { status: "offline" }
      });
    }

    try {
      const list = JSON.parse(stdout);
      const statusMap = { Matilda: { status: "offline" }, Cade: { status: "offline" }, Effie: { status: "offline" } };
      list.forEach(proc => {
        const name = proc.name.toLowerCase();
        const online = proc.pm2_env.status === "online";
        if (name.includes("matilda")) statusMap.Matilda.status = online ? "online" : "offline";
        if (name.includes("cade")) statusMap.Cade.status = online ? "online" : "offline";
        if (name.includes("effie")) statusMap.Effie.status = online ? "online" : "offline";
      });
      res.json(statusMap);
    } catch {
      res.json({
        Matilda: { status: "offline" },
        Cade: { status: "offline" },
        Effie: { status: "offline" }
      });
    }
  });
});

// --- 2️⃣ Chat Endpoint: Send input to Ollama ---
app.post("/api/chat", async (req, res) => {
  const userMessage = req.body.message || "";
  if (!userMessage.trim()) return res.json({ reply: "..." });

  try {
    const response = await fetch("http://127.0.0.1:11434/api/generate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ model: "llama3:8b", prompt: userMessage, stream: false })
    });

    const data = await response.json();
    const reply = data.response || "(no response)";

    res.json({ reply });
  } catch (err) {
    console.error("Chat error:", err);
    res.json({ reply: "(Matilda is thinking... or disconnected)" });
  }
});

// --- 3️⃣ Ops Stream & Project Tracker Endpoints (Unchanged) ---
app.get("/api/ops-stream", (req, res) => {
  const logFile = path.join(__dirname, "ui/dashboard/ticker-events.log");
  if (!fs.existsSync(logFile)) return res.json([]);
  const logs = fs.readFileSync(logFile, "utf-8").split("
").filter(Boolean);
  const events = logs.slice(-20).map(line => {
    try {
      const obj = JSON.parse(line);
      return { message: `${obj.agent} | ${obj.event}` };
    } catch {
      return { message: line };
    }
  });
  res.json(events);
});

app.listen(PORT, () => console.log(`✅ Dashboard live on port ${PORT}`));

// --- 4️⃣ Chat Endpoint for Matilda ---
import fetch from "node-fetch";
import bodyParser from "body-parser";

// Middleware to parse JSON bodies
app.use(bodyParser.json());

app.post("/api/chat", async (req, res) => {
  const userMessage = req.body?.message || "";
  console.log("📩 Chat received:", userMessage);

  try {
    // Call local Ollama server
    const ollamaRes = await fetch("http://127.0.0.1:11434/api/generate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model: "llama3:8b",
        prompt: userMessage,
        stream: false
      })
    });

    const ollamaData = await ollamaRes.json();
    const reply = ollamaData.response || "(no response)";
    console.log("🤖 Matilda reply:", reply);

    // Return reply to dashboard
    res.json({ reply });

    // Optional: Log chat to ticker-events.log for auditing
    fs.appendFileSync(
      path.join(__dirname, "ui/dashboard/ticker-events.log"),
      JSON.stringify({
        timestamp: Math.floor(Date.now()/1000),
        agent: "matilda",
        event: `chat: ${userMessage} -> ${reply}`
      }) + "
"
    );
  } catch (err) {
    console.error("❌ Chat error:", err);
    res.status(500).json({ reply: "(error)" });
  }
});
